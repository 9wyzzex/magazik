import logging
import json
import os # –î–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv # –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ .env —Ñ–∞–π–ª–∞

import smtplib
from email.mime.text import MIMEText
from email.header import Header

from telegram import Update, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = os.getenv("7829060962:AAGpKvjaBFErnt5F4LCLQAew2ZFSeFlHLrg")
WEB_APP_URL = os.getenv("https://magazik.vercel.app/")
# https://github.com/9wyzzex/magazik.git
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Email (–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
SMTP_SERVER = os.getenv("SMTP_SERVER")
SMTP_PORT = int(os.getenv("SMTP_PORT", 587)) # –ü–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 587
SMTP_LOGIN = os.getenv("SMTP_LOGIN")
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")
EMAIL_TO = os.getenv("EMAIL_TO") # –ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–∏—Å—å–º–æ —Å –∑–∞–∫–∞–∑–æ–º
EMAIL_FROM = os.getenv("EMAIL_FROM", SMTP_LOGIN) # –û—Ç –∫–æ–≥–æ –ø–∏—Å—å–º–æ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–º)

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
if not all([BOT_TOKEN, WEB_APP_URL, SMTP_SERVER, SMTP_LOGIN, SMTP_PASSWORD, EMAIL_TO]):
    error_message = "–û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (BOT_TOKEN, WEB_APP_URL, SMTP_*, EMAIL_TO)."
    print(error_message) # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –µ—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ
    # exit(error_message)


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton(
            "üõãÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω –º–µ–±–µ–ª–∏",
            web_app=WebAppInfo(url=WEB_APP_URL)
        )]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–ú–µ–±–µ–ª—å–Ω—ã–π –†–∞–π"! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥:',
        reply_markup=reply_markup
    )

def format_order_for_email(order_data: dict) -> str:
    user_info = order_data.get('user', {})
    user_details = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info.get('firstName', 'N/A')} {user_info.get('lastName', '')}\n"
        f"Username: @{user_info.get('username', 'N/A')}\n"
        f"Telegram ID: {user_info.get('id', 'N/A')}\n\n"
    )

    items_list_html = "<ul>"
    for item in order_data.get('items', []):
        items_list_html += (
            f"<li>{item.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä')} "
            f"({item.get('quantity', 0)} —à—Ç. x {item.get('price', 0):.2f} {order_data.get('currency', 'RUB')}) = "
            f"<b>{item.get('total', 0):.2f} {order_data.get('currency', 'RUB')}</b></li>"
        )
    items_list_html += "</ul>"
    
    total_amount = order_data.get('totalAmount', 0)
    currency = order_data.get('currency', 'RUB')

    email_body_html = f"""
    <html>
        <head></head>
        <body>
            <h2>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ "–ú–µ–±–µ–ª—å–Ω–æ–º –†–∞—é"!</h2>
            <p><strong>–î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</strong><br>{user_details.replace("\n", "<br>")}</p>
            <p><strong>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</strong></p>
            {items_list_html}
            <p><strong>–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total_amount:.2f} {currency}</strong></p>
            <p><em>–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ (UTC): {order_data.get('timestamp', 'N/A')}</em></p>
        </body>
    </html>
    """
    return email_body_html

async def send_order_email(order_data: dict) -> bool:
    if not all([SMTP_SERVER, SMTP_LOGIN, SMTP_PASSWORD, EMAIL_TO]):
        logger.error("SMTP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–ª–Ω–∞—è. Email –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        return False
        
    subject = f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_data.get('user', {}).get('id', 'N/A')}_{order_data.get('timestamp', '').split('T')[0]}"
    body_html = format_order_for_email(order_data)

    msg = MIMEText(body_html, 'html', 'utf-8')
    msg['Subject'] = Header(subject, 'utf-8')
    msg['From'] = EMAIL_FROM
    msg['To'] = EMAIL_TO

    try:
        # –î–ª—è Gmail –∏ –¥—Ä—É–≥–∏—Ö, –∫—Ç–æ —Ç—Ä–µ–±—É–µ—Ç TLS
        if SMTP_PORT == 587:
            server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
            server.starttls() # –í–∫–ª—é—á–µ–Ω–∏–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        # –î–ª—è SSL (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Ä—Ç 465)
        elif SMTP_PORT == 465:
             server = smtplib.SMTP_SSL(SMTP_SERVER, SMTP_PORT)
        else: # –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ—Ä—Ç–æ–≤ –±–µ–∑ —è–≤–Ω–æ–≥–æ TLS/SSL (–º–µ–Ω–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ)
            server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)

        server.login(SMTP_LOGIN, SMTP_PASSWORD)
        server.sendmail(EMAIL_FROM, EMAIL_TO, msg.as_string())
        server.quit()
        logger.info(f"Email —Å –∑–∞–∫–∞–∑–æ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {EMAIL_TO}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {e}")
        return False

async def web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        data_str = update.message.web_app_data.data
        user = update.message.from_user
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –æ—Ç Web App –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {data_str}")

        order_data = json.loads(data_str)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
        email_sent = await send_order_email(order_data)

        items_text_list = []
        for item in order_data.get('items', []):
            items_text_list.append(
                f"- {item.get('name', 'N/A')} ({item.get('quantity', 0)} —à—Ç.) = {item.get('total', 0):.2f} {order_data.get('currency', 'RUB')}"
            )
        
        items_text = "\n".join(items_text_list)
        total_amount = order_data.get('totalAmount', 0)
        currency = order_data.get('currency', 'RUB')

        reply_message = (
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑, {user.first_name}!\n\n"
            f"–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n{items_text}\n\n"
            f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total_amount:.2f} {currency}\n\n"
        )
        if email_sent:
            reply_message += "–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –∑–∞–∫–∞–∑ –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏. –ö–æ–ø–∏—è –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ—á—Ç—É –º–∞–≥–∞–∑–∏–Ω–∞."
        else:
            reply_message += "–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –∑–∞–∫–∞–∑. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏. (–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ—á—Ç—É –º–∞–≥–∞–∑–∏–Ω–∞)."
        
        await update.message.reply_text(reply_message)

    except json.JSONDecodeError:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç Web App: {data_str}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ (–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö Web App: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º!")


def main() -> None:
    if not BOT_TOKEN: # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        logger.critical("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, web_app_data))

    logger.info("–ú–µ–±–µ–ª—å–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()